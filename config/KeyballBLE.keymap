#define ZMK_POINTING_DEFAULT_SCRL_VAL 120    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        double_quotation {
            bindings = <&kp AT>;
            key-positions = <8 7>;
        };

        quotation {
            bindings = <&kp AMPERSAND>;
            key-positions = <6 5>;
        };

        tab {
            bindings = <&kp TAB>;
            key-positions = <4 3>;
        };

        colon {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <28 40>;
        };

        semi_colon {
            bindings = <&kp SEMICOLON>;
            key-positions = <16 40>;
        };

        left_kakko {
            bindings = <&kp ASTERISK>;
            key-positions = <16 17>;
        };

        right_kakko {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <28 29>;
        };

        at {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <10 11>;
        };

        escape {
            bindings = <&kp ESCAPE>;
            key-positions = <0 1>;
        };

        left_kagikakko {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <19 20>;
        };

        right_kagikakko {
            bindings = <&kp BACKSLASH>;
            key-positions = <31 32>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <17 18>;
        };

        question {
            bindings = <&kp QUESTION>;
            key-positions = <29 30>;
        };

        delete {
            bindings = <&kp DELETE>;
            key-positions = <41 40>;
        };

        task_manager {
            bindings = <&kp LA(LC(DELETE))>;
            key-positions = <34 35>;
        };

        ampersand {
            bindings = <&kp CARET>;
            key-positions = <12 13>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        mitsui_email: mitsui_email {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&none &kp LS(Y) &kp A &kp M &kp A &kp M &kp O &kp T &kp O &kp DOT &kp T &kp A &kp LBKT &kp M &kp I &kp T &kp S &kp U &kp I &kp DOT &kp C &kp O &kp M>;
            label = "MITSUI_EMAIL";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };

        ROTATE: ROTATE {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ROTATE";
            #sensor-binding-cells = <2>;
            bindings = <&msc>, <&msc>;

            tap-ms = <20>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W         &kp E         &kp R                             &kp T                                                                   &kp Y          &kp U  &lt 5 I    &kp O      &kp P
&kp A             &kp S         &kp D         &kp F                             &kp G        &mkp LCLK                          &kp COMMA               &kp H          &kp J  &kp K      &kp L      &kp MINUS
&kp LEFT_SHIFT    &kp Z         &kp X         &kp C                             &kp V        &kp B                              &kp PERIOD              &kp N          &kp M  &mkp LCLK  &mkp RCLK  &kp SLASH
&kp LEFT_CONTROL  &kp LEFT_WIN  &kp LEFT_ALT  &lt_to_layer_0 4 INTERNATIONAL_4  &lt 2 ENTER  &lt_to_layer_0 3 INT_MUHENKAN      &lt_to_layer_0 1 SPACE  &kp BACKSPACE                               &lt_to_layer_0 6 LS(INTERNATIONAL_1)
            >;

            sensor-bindings = <&ROTATE SCRL_DOWN SCRL_UP>;
        };

        FUNCTION {
            bindings = <
&trans     &trans     &trans     &trans     &trans                                &kp F1   &kp F2   &kp F3   &kp F4         &kp F5
&kp LC(A)  &kp LC(S)  &kp LC(D)  &kp LC(F)  &kp LC(G)  &trans             &trans  &kp F6   &kp F7   &kp F8   &kp F9         &kp F10
&trans     &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(V))      &trans  &kp F11  &kp F12  &kp F13  &mitsui_email  &kp PAGE_UP
&trans     &trans     &trans     &trans     &trans     &trans             &trans  &trans                                    &kp PAGE_DOWN
            >;
        };

        NUM {
            bindings = <
&kp KP_NUMBER_1      &kp KP_NUMBER_2  &kp KP_NUMBER_3    &kp KP_NUMBER_4  &kp KP_NUMBER_5                                                     &kp KP_NUMBER_6  &kp KP_NUMBER_7    &kp KP_NUMBER_8  &kp KP_NUMBER_9   &kp KP_NUMBER_0
&kp COLON            &kp MINUS        &kp DOUBLE_QUOTES  &kp SLASH        &kp UNDERSCORE   &kp LC(LA(KP_NUMBER_0))      &kp ASTERISK          &kp EXCLAMATION  &kp COMMA          &kp HASH         &kp LEFT_BRACKET  &kp CARET
&kp INTERNATIONAL_3  &kp DOLLAR       &kp EQUAL          &kp PLUS         &kp PERCENT      &kp PERIOD                   &kp LEFT_PARENTHESIS  &kp QUESTION     &kp RIGHT_BRACKET  &kp BACKSLASH    &kp RIGHT_BRACE   &kp PIPE
&trans               &trans           &trans             &trans           &trans           &trans                       &trans                &trans                                                                 &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))     &kp UP_ARROW    &kp LC(TAB)          &trans                       &trans  &trans                  &kp LS(LC(UP_ARROW))    &trans                   &trans
&kp HOME        &kp LEFT_ARROW      &kp DOWN_ARROW  &kp RIGHT_ARROW      &kp END  &trans      &trans  &trans  &kp LS(LC(LEFT_ARROW))  &kp LS(LC(DOWN_ARROW))  &kp LS(LC(RIGHT_ARROW))  &trans
&kp LEFT_SHIFT  &kp LG(LEFT_ARROW)  &trans          &kp LG(RIGHT_ARROW)  &trans   &trans      &trans  &trans  &trans                  &trans                  &trans                   &trans
&trans          &trans              &trans          &trans               &trans   &trans      &trans  &trans                                                                           &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &mkp LCLK  &mkp MCLK  &mkp RCLK  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans     &trans     &trans     &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                                   &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans                      &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                                 &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans     &trans      &studio_unlock  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kt KP_N4  &trans      &bootloader     &trans        &trans        &trans        &trans        &bt BT_CLR_ALL
&trans  &trans        &trans        &trans        &trans     &trans      &trans          &trans                                                  &trans
            >;
        };
    };
};
